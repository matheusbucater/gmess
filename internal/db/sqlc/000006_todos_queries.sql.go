// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: 000006_todos_queries.sql

package sqlc

import (
	"context"
)

const createTodo = `-- name: CreateTodo :one
INSERT INTO todos (message_id) VALUES (?) RETURNING id, message_id, status, created_at, updated_at
`

func (q *Queries) CreateTodo(ctx context.Context, messageID int64) (Todo, error) {
	row := q.db.QueryRowContext(ctx, createTodo, messageID)
	var i Todo
	err := row.Scan(
		&i.ID,
		&i.MessageID,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteTodoById = `-- name: DeleteTodoById :exec
DELETE FROM todos WHERE id = ?
`

func (q *Queries) DeleteTodoById(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteTodoById, id)
	return err
}

const deleteTodoByIdReturningMsgId = `-- name: DeleteTodoByIdReturningMsgId :one
DELETE FROM todos WHERE id = ? RETURNING message_id
`

func (q *Queries) DeleteTodoByIdReturningMsgId(ctx context.Context, id int64) (int64, error) {
	row := q.db.QueryRowContext(ctx, deleteTodoByIdReturningMsgId, id)
	var message_id int64
	err := row.Scan(&message_id)
	return message_id, err
}

const deleteTodoByMessageId = `-- name: DeleteTodoByMessageId :exec
DELETE FROM todos WHERE message_id = ?
`

func (q *Queries) DeleteTodoByMessageId(ctx context.Context, messageID int64) error {
	_, err := q.db.ExecContext(ctx, deleteTodoByMessageId, messageID)
	return err
}

const getTodoById = `-- name: GetTodoById :one
SELECT id, message_id, status, created_at, updated_at FROM todos WHERE id = ?
`

func (q *Queries) GetTodoById(ctx context.Context, id int64) (Todo, error) {
	row := q.db.QueryRowContext(ctx, getTodoById, id)
	var i Todo
	err := row.Scan(
		&i.ID,
		&i.MessageID,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getTodoByMessageId = `-- name: GetTodoByMessageId :one
SELECT id, message_id, status, created_at, updated_at FROM todos WHERE message_id = ?
`

func (q *Queries) GetTodoByMessageId(ctx context.Context, messageID int64) (Todo, error) {
	row := q.db.QueryRowContext(ctx, getTodoByMessageId, messageID)
	var i Todo
	err := row.Scan(
		&i.ID,
		&i.MessageID,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getTodos = `-- name: GetTodos :many
SELECT id, message_id, status, created_at, updated_at FROM todos
`

func (q *Queries) GetTodos(ctx context.Context) ([]Todo, error) {
	rows, err := q.db.QueryContext(ctx, getTodos)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Todo
	for rows.Next() {
		var i Todo
		if err := rows.Scan(
			&i.ID,
			&i.MessageID,
			&i.Status,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const todoExists = `-- name: TodoExists :one
SELECT EXISTS(
    SELECT 1 FROM todos 
    WHERE id = ?
) AS "exists"
`

func (q *Queries) TodoExists(ctx context.Context, id int64) (int64, error) {
	row := q.db.QueryRowContext(ctx, todoExists, id)
	var exists int64
	err := row.Scan(&exists)
	return exists, err
}

const updateTodoById = `-- name: UpdateTodoById :one
UPDATE todos SET status = ? WHERE id = ? RETURNING id, message_id, status, created_at, updated_at
`

type UpdateTodoByIdParams struct {
	Status string
	ID     int64
}

func (q *Queries) UpdateTodoById(ctx context.Context, arg UpdateTodoByIdParams) (Todo, error) {
	row := q.db.QueryRowContext(ctx, updateTodoById, arg.Status, arg.ID)
	var i Todo
	err := row.Scan(
		&i.ID,
		&i.MessageID,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateTodoByMessageId = `-- name: UpdateTodoByMessageId :one
UPDATE todos SET status = ? WHERE message_id = ? RETURNING id, message_id, status, created_at, updated_at
`

type UpdateTodoByMessageIdParams struct {
	Status    string
	MessageID int64
}

func (q *Queries) UpdateTodoByMessageId(ctx context.Context, arg UpdateTodoByMessageIdParams) (Todo, error) {
	row := q.db.QueryRowContext(ctx, updateTodoByMessageId, arg.Status, arg.MessageID)
	var i Todo
	err := row.Scan(
		&i.ID,
		&i.MessageID,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
