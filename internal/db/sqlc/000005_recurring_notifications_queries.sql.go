// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: 000005_recurring_notifications_queries.sql

package sqlc

import (
	"context"
	"database/sql"
)

const createRecurringNotification = `-- name: CreateRecurringNotification :one
INSERT INTO recurring_notifications (notification_id, trigger_at_time) VALUES (?, ?) RETURNING notification_id, trigger_at_time
`

type CreateRecurringNotificationParams struct {
	NotificationID int64
	TriggerAtTime  sql.NullString
}

func (q *Queries) CreateRecurringNotification(ctx context.Context, arg CreateRecurringNotificationParams) (RecurringNotification, error) {
	row := q.db.QueryRowContext(ctx, createRecurringNotification, arg.NotificationID, arg.TriggerAtTime)
	var i RecurringNotification
	err := row.Scan(&i.NotificationID, &i.TriggerAtTime)
	return i, err
}

const createRecurringNotificationDay = `-- name: CreateRecurringNotificationDay :exec
INSERT INTO recurring_notification_days (recurring_notification_id, week_day) VALUES (?, ?)
`

type CreateRecurringNotificationDayParams struct {
	RecurringNotificationID int64
	WeekDay                 string
}

func (q *Queries) CreateRecurringNotificationDay(ctx context.Context, arg CreateRecurringNotificationDayParams) error {
	_, err := q.db.ExecContext(ctx, createRecurringNotificationDay, arg.RecurringNotificationID, arg.WeekDay)
	return err
}

const deleteRecurringNotificationDayByNotificationId = `-- name: DeleteRecurringNotificationDayByNotificationId :exec
DELETE FROM recurring_notification_days WHERE recurring_notification_id = ? AND week_day = ?
`

type DeleteRecurringNotificationDayByNotificationIdParams struct {
	RecurringNotificationID int64
	WeekDay                 string
}

func (q *Queries) DeleteRecurringNotificationDayByNotificationId(ctx context.Context, arg DeleteRecurringNotificationDayByNotificationIdParams) error {
	_, err := q.db.ExecContext(ctx, deleteRecurringNotificationDayByNotificationId, arg.RecurringNotificationID, arg.WeekDay)
	return err
}

const getRecurringNotificationByNotificationId = `-- name: GetRecurringNotificationByNotificationId :one
SELECT notification_id, trigger_at_time FROM recurring_notifications WHERE notification_id = ?
`

func (q *Queries) GetRecurringNotificationByNotificationId(ctx context.Context, notificationID int64) (RecurringNotification, error) {
	row := q.db.QueryRowContext(ctx, getRecurringNotificationByNotificationId, notificationID)
	var i RecurringNotification
	err := row.Scan(&i.NotificationID, &i.TriggerAtTime)
	return i, err
}

const getRecurringNotificationDaysByNotificationId = `-- name: GetRecurringNotificationDaysByNotificationId :many
SELECT recurring_notification_id, week_day FROM recurring_notification_days WHERE recurring_notification_id = ?
`

func (q *Queries) GetRecurringNotificationDaysByNotificationId(ctx context.Context, recurringNotificationID int64) ([]RecurringNotificationDay, error) {
	rows, err := q.db.QueryContext(ctx, getRecurringNotificationDaysByNotificationId, recurringNotificationID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []RecurringNotificationDay
	for rows.Next() {
		var i RecurringNotificationDay
		if err := rows.Scan(&i.RecurringNotificationID, &i.WeekDay); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const recurringNotificationHasDay = `-- name: RecurringNotificationHasDay :one
SELECT EXISTS(
    SELECT 1 FROM recurring_notification_days 
    WHERE recurring_notification_id = ?
    AND week_day = ?
) AS "exists"
`

type RecurringNotificationHasDayParams struct {
	RecurringNotificationID int64
	WeekDay                 string
}

func (q *Queries) RecurringNotificationHasDay(ctx context.Context, arg RecurringNotificationHasDayParams) (int64, error) {
	row := q.db.QueryRowContext(ctx, recurringNotificationHasDay, arg.RecurringNotificationID, arg.WeekDay)
	var exists int64
	err := row.Scan(&exists)
	return exists, err
}

const updateRecurringNotification = `-- name: UpdateRecurringNotification :one
UPDATE recurring_notifications SET trigger_at_time = ? WHERE notification_id = ? RETURNING notification_id, trigger_at_time
`

type UpdateRecurringNotificationParams struct {
	TriggerAtTime  sql.NullString
	NotificationID int64
}

func (q *Queries) UpdateRecurringNotification(ctx context.Context, arg UpdateRecurringNotificationParams) (RecurringNotification, error) {
	row := q.db.QueryRowContext(ctx, updateRecurringNotification, arg.TriggerAtTime, arg.NotificationID)
	var i RecurringNotification
	err := row.Scan(&i.NotificationID, &i.TriggerAtTime)
	return i, err
}
