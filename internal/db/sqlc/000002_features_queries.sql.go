// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: 000002_features_queries.sql

package sqlc

import (
	"context"
)

const getFeatures = `-- name: GetFeatures :many
SELECT name, seq FROM features
`

func (q *Queries) GetFeatures(ctx context.Context) ([]Feature, error) {
	rows, err := q.db.QueryContext(ctx, getFeatures)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Feature
	for rows.Next() {
		var i Feature
		if err := rows.Scan(&i.Name, &i.Seq); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getFeaturesByMessageId = `-- name: GetFeaturesByMessageId :many
SELECT feature_name FROM messages_features WHERE message_id = ?
`

func (q *Queries) GetFeaturesByMessageId(ctx context.Context, messageID int64) ([]string, error) {
	rows, err := q.db.QueryContext(ctx, getFeaturesByMessageId, messageID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []string
	for rows.Next() {
		var feature_name string
		if err := rows.Scan(&feature_name); err != nil {
			return nil, err
		}
		items = append(items, feature_name)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
