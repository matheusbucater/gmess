// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: 000003_notifications_queries.sql

package sqlc

import (
	"context"
	"time"
)

const createNotification = `-- name: CreateNotification :one
INSERT INTO notifications (message_id, type) VALUES (?, ?) RETURNING id, message_id, type, created_at, updated_at
`

type CreateNotificationParams struct {
	MessageID int64
	Type      string
}

func (q *Queries) CreateNotification(ctx context.Context, arg CreateNotificationParams) (Notification, error) {
	row := q.db.QueryRowContext(ctx, createNotification, arg.MessageID, arg.Type)
	var i Notification
	err := row.Scan(
		&i.ID,
		&i.MessageID,
		&i.Type,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const createSimpleNotification = `-- name: CreateSimpleNotification :exec
INSERT INTO simple_notifications (notification_id, trigger_at) VALUES (?, ?)
`

type CreateSimpleNotificationParams struct {
	NotificationID int64
	TriggerAt      time.Time
}

func (q *Queries) CreateSimpleNotification(ctx context.Context, arg CreateSimpleNotificationParams) error {
	_, err := q.db.ExecContext(ctx, createSimpleNotification, arg.NotificationID, arg.TriggerAt)
	return err
}

const getNotifications = `-- name: GetNotifications :many
SELECT id, message_id, type, created_at, updated_at FROM notifications
`

func (q *Queries) GetNotifications(ctx context.Context) ([]Notification, error) {
	rows, err := q.db.QueryContext(ctx, getNotifications)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Notification
	for rows.Next() {
		var i Notification
		if err := rows.Scan(
			&i.ID,
			&i.MessageID,
			&i.Type,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getSimpleNotificationByNotificationId = `-- name: GetSimpleNotificationByNotificationId :one
SELECT notification_id, trigger_at FROM simple_notifications WHERE notification_id = ?
`

func (q *Queries) GetSimpleNotificationByNotificationId(ctx context.Context, notificationID int64) (SimpleNotification, error) {
	row := q.db.QueryRowContext(ctx, getSimpleNotificationByNotificationId, notificationID)
	var i SimpleNotification
	err := row.Scan(&i.NotificationID, &i.TriggerAt)
	return i, err
}
