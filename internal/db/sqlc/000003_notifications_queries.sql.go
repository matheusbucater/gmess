// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: 000003_notifications_queries.sql

package sqlc

import (
	"context"
)

const createNotification = `-- name: CreateNotification :one
INSERT INTO notifications (message_id, type) VALUES (?, ?) RETURNING id, message_id, type, created_at, updated_at
`

type CreateNotificationParams struct {
	MessageID int64
	Type      string
}

func (q *Queries) CreateNotification(ctx context.Context, arg CreateNotificationParams) (Notification, error) {
	row := q.db.QueryRowContext(ctx, createNotification, arg.MessageID, arg.Type)
	var i Notification
	err := row.Scan(
		&i.ID,
		&i.MessageID,
		&i.Type,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteNotificationById = `-- name: DeleteNotificationById :exec
DELETE FROM notifications WHERE id = ?
`

func (q *Queries) DeleteNotificationById(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteNotificationById, id)
	return err
}

const deleteNotificationByIdReturningMsgId = `-- name: DeleteNotificationByIdReturningMsgId :one
DELETE FROM notifications WHERE id = ? RETURNING message_id
`

func (q *Queries) DeleteNotificationByIdReturningMsgId(ctx context.Context, id int64) (int64, error) {
	row := q.db.QueryRowContext(ctx, deleteNotificationByIdReturningMsgId, id)
	var message_id int64
	err := row.Scan(&message_id)
	return message_id, err
}

const getNotificationById = `-- name: GetNotificationById :one
SELECT id, message_id, type, created_at, updated_at FROM notifications WHERE id = ?
`

func (q *Queries) GetNotificationById(ctx context.Context, id int64) (Notification, error) {
	row := q.db.QueryRowContext(ctx, getNotificationById, id)
	var i Notification
	err := row.Scan(
		&i.ID,
		&i.MessageID,
		&i.Type,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getNotifications = `-- name: GetNotifications :many
SELECT id, message_id, type, created_at, updated_at FROM notifications
`

func (q *Queries) GetNotifications(ctx context.Context) ([]Notification, error) {
	rows, err := q.db.QueryContext(ctx, getNotifications)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Notification
	for rows.Next() {
		var i Notification
		if err := rows.Scan(
			&i.ID,
			&i.MessageID,
			&i.Type,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getNotificationsOrderByCreatedAtASC = `-- name: GetNotificationsOrderByCreatedAtASC :many
SELECT id, message_id, type, created_at, updated_at FROM notifications ORDER BY created_at ASC
`

func (q *Queries) GetNotificationsOrderByCreatedAtASC(ctx context.Context) ([]Notification, error) {
	rows, err := q.db.QueryContext(ctx, getNotificationsOrderByCreatedAtASC)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Notification
	for rows.Next() {
		var i Notification
		if err := rows.Scan(
			&i.ID,
			&i.MessageID,
			&i.Type,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getNotificationsOrderByCreatedAtDESC = `-- name: GetNotificationsOrderByCreatedAtDESC :many
SELECT id, message_id, type, created_at, updated_at FROM notifications ORDER BY created_at DESC
`

func (q *Queries) GetNotificationsOrderByCreatedAtDESC(ctx context.Context) ([]Notification, error) {
	rows, err := q.db.QueryContext(ctx, getNotificationsOrderByCreatedAtDESC)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Notification
	for rows.Next() {
		var i Notification
		if err := rows.Scan(
			&i.ID,
			&i.MessageID,
			&i.Type,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getNotificationsOrderByTypeASC = `-- name: GetNotificationsOrderByTypeASC :many
SELECT id, message_id, type, created_at, updated_at FROM notifications ORDER BY type ASC
`

func (q *Queries) GetNotificationsOrderByTypeASC(ctx context.Context) ([]Notification, error) {
	rows, err := q.db.QueryContext(ctx, getNotificationsOrderByTypeASC)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Notification
	for rows.Next() {
		var i Notification
		if err := rows.Scan(
			&i.ID,
			&i.MessageID,
			&i.Type,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getNotificationsOrderByTypeDESC = `-- name: GetNotificationsOrderByTypeDESC :many
SELECT id, message_id, type, created_at, updated_at FROM notifications ORDER BY type DESC
`

func (q *Queries) GetNotificationsOrderByTypeDESC(ctx context.Context) ([]Notification, error) {
	rows, err := q.db.QueryContext(ctx, getNotificationsOrderByTypeDESC)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Notification
	for rows.Next() {
		var i Notification
		if err := rows.Scan(
			&i.ID,
			&i.MessageID,
			&i.Type,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getNotificationsOrderByUpdatedAtASC = `-- name: GetNotificationsOrderByUpdatedAtASC :many
SELECT id, message_id, type, created_at, updated_at FROM notifications ORDER BY updated_at ASC
`

func (q *Queries) GetNotificationsOrderByUpdatedAtASC(ctx context.Context) ([]Notification, error) {
	rows, err := q.db.QueryContext(ctx, getNotificationsOrderByUpdatedAtASC)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Notification
	for rows.Next() {
		var i Notification
		if err := rows.Scan(
			&i.ID,
			&i.MessageID,
			&i.Type,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getNotificationsOrderByUpdatedAtDESC = `-- name: GetNotificationsOrderByUpdatedAtDESC :many
SELECT id, message_id, type, created_at, updated_at FROM notifications ORDER BY updated_at DESC
`

func (q *Queries) GetNotificationsOrderByUpdatedAtDESC(ctx context.Context) ([]Notification, error) {
	rows, err := q.db.QueryContext(ctx, getNotificationsOrderByUpdatedAtDESC)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Notification
	for rows.Next() {
		var i Notification
		if err := rows.Scan(
			&i.ID,
			&i.MessageID,
			&i.Type,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const notificationExists = `-- name: NotificationExists :one
SELECT EXISTS(
    SELECT 1 
    FROM notifications
    WHERE id = ?
) AS "exists"
`

func (q *Queries) NotificationExists(ctx context.Context, id int64) (int64, error) {
	row := q.db.QueryRowContext(ctx, notificationExists, id)
	var exists int64
	err := row.Scan(&exists)
	return exists, err
}
