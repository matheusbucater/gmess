// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: 000001_messages_queries.sql

package sqlc

import (
	"context"
)

const countMessages = `-- name: CountMessages :one
SELECT count(*) FROM messages
`

func (q *Queries) CountMessages(ctx context.Context) (int64, error) {
	row := q.db.QueryRowContext(ctx, countMessages)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createMessage = `-- name: CreateMessage :one
INSERT INTO messages (text) VALUES (?) RETURNING id, text, created_at, updated_at
`

func (q *Queries) CreateMessage(ctx context.Context, text string) (Message, error) {
	row := q.db.QueryRowContext(ctx, createMessage, text)
	var i Message
	err := row.Scan(
		&i.ID,
		&i.Text,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteMessage = `-- name: DeleteMessage :exec
DELETE FROM messages WHERE id = ?
`

func (q *Queries) DeleteMessage(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteMessage, id)
	return err
}

const getMessageById = `-- name: GetMessageById :one
SELECT id, text, created_at, updated_at FROM messages WHERE id = ? LIMIT 1
`

func (q *Queries) GetMessageById(ctx context.Context, id int64) (Message, error) {
	row := q.db.QueryRowContext(ctx, getMessageById, id)
	var i Message
	err := row.Scan(
		&i.ID,
		&i.Text,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getMessages = `-- name: GetMessages :many
SELECT id, text, created_at, updated_at FROM messages
`

func (q *Queries) GetMessages(ctx context.Context) ([]Message, error) {
	rows, err := q.db.QueryContext(ctx, getMessages)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Message
	for rows.Next() {
		var i Message
		if err := rows.Scan(
			&i.ID,
			&i.Text,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getMessagesOrderByCreatedAtASC = `-- name: GetMessagesOrderByCreatedAtASC :many
SELECT id, text, created_at, updated_at FROM messages ORDER BY created_at ASC
`

func (q *Queries) GetMessagesOrderByCreatedAtASC(ctx context.Context) ([]Message, error) {
	rows, err := q.db.QueryContext(ctx, getMessagesOrderByCreatedAtASC)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Message
	for rows.Next() {
		var i Message
		if err := rows.Scan(
			&i.ID,
			&i.Text,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getMessagesOrderByCreatedAtDESC = `-- name: GetMessagesOrderByCreatedAtDESC :many
SELECT id, text, created_at, updated_at FROM messages ORDER BY created_at DESC
`

func (q *Queries) GetMessagesOrderByCreatedAtDESC(ctx context.Context) ([]Message, error) {
	rows, err := q.db.QueryContext(ctx, getMessagesOrderByCreatedAtDESC)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Message
	for rows.Next() {
		var i Message
		if err := rows.Scan(
			&i.ID,
			&i.Text,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getMessagesOrderByTextASC = `-- name: GetMessagesOrderByTextASC :many
SELECT id, text, created_at, updated_at FROM messages ORDER BY text ASC
`

func (q *Queries) GetMessagesOrderByTextASC(ctx context.Context) ([]Message, error) {
	rows, err := q.db.QueryContext(ctx, getMessagesOrderByTextASC)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Message
	for rows.Next() {
		var i Message
		if err := rows.Scan(
			&i.ID,
			&i.Text,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getMessagesOrderByTextDESC = `-- name: GetMessagesOrderByTextDESC :many
SELECT id, text, created_at, updated_at FROM messages ORDER BY text DESC
`

func (q *Queries) GetMessagesOrderByTextDESC(ctx context.Context) ([]Message, error) {
	rows, err := q.db.QueryContext(ctx, getMessagesOrderByTextDESC)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Message
	for rows.Next() {
		var i Message
		if err := rows.Scan(
			&i.ID,
			&i.Text,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getMessagesOrderByUpdatedAtASC = `-- name: GetMessagesOrderByUpdatedAtASC :many
SELECT id, text, created_at, updated_at FROM messages ORDER BY updated_at ASC
`

func (q *Queries) GetMessagesOrderByUpdatedAtASC(ctx context.Context) ([]Message, error) {
	rows, err := q.db.QueryContext(ctx, getMessagesOrderByUpdatedAtASC)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Message
	for rows.Next() {
		var i Message
		if err := rows.Scan(
			&i.ID,
			&i.Text,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getMessagesOrderByUpdatedAtDESC = `-- name: GetMessagesOrderByUpdatedAtDESC :many
SELECT id, text, created_at, updated_at FROM messages ORDER BY updated_at DESC
`

func (q *Queries) GetMessagesOrderByUpdatedAtDESC(ctx context.Context) ([]Message, error) {
	rows, err := q.db.QueryContext(ctx, getMessagesOrderByUpdatedAtDESC)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Message
	for rows.Next() {
		var i Message
		if err := rows.Scan(
			&i.ID,
			&i.Text,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const messageExists = `-- name: MessageExists :one
SELECT EXISTS(
    SELECT 1 FROM messages 
    WHERE id = ?
) AS "exists"
`

func (q *Queries) MessageExists(ctx context.Context, id int64) (int64, error) {
	row := q.db.QueryRowContext(ctx, messageExists, id)
	var exists int64
	err := row.Scan(&exists)
	return exists, err
}

const updateMessage = `-- name: UpdateMessage :one
UPDATE messages SET text = ?, updated_at = CURRENT_TIMESTAMP  WHERE id = ? RETURNING id, text, created_at, updated_at
`

type UpdateMessageParams struct {
	Text string
	ID   int64
}

func (q *Queries) UpdateMessage(ctx context.Context, arg UpdateMessageParams) (Message, error) {
	row := q.db.QueryRowContext(ctx, updateMessage, arg.Text, arg.ID)
	var i Message
	err := row.Scan(
		&i.ID,
		&i.Text,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
