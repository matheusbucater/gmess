// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: 000002_features_queries.sql

package sqlc

import (
	"context"
)

const createMessageFeature = `-- name: CreateMessageFeature :exec
INSERT INTO messages_features (message_id, feature_name) VALUES (?, ?)
`

type CreateMessageFeatureParams struct {
	MessageID   int64
	FeatureName string
}

func (q *Queries) CreateMessageFeature(ctx context.Context, arg CreateMessageFeatureParams) error {
	_, err := q.db.ExecContext(ctx, createMessageFeature, arg.MessageID, arg.FeatureName)
	return err
}

const decrementMessageFeatureCount = `-- name: DecrementMessageFeatureCount :exec
UPDATE messages_features SET count = count - 1 WHERE message_id = ? AND feature_name = ?
`

type DecrementMessageFeatureCountParams struct {
	MessageID   int64
	FeatureName string
}

func (q *Queries) DecrementMessageFeatureCount(ctx context.Context, arg DecrementMessageFeatureCountParams) error {
	_, err := q.db.ExecContext(ctx, decrementMessageFeatureCount, arg.MessageID, arg.FeatureName)
	return err
}

const featureExists = `-- name: FeatureExists :one
SELECT EXISTS(
    SELECT 1 FROM features
    WHERE name = ?
) AS "exists"
`

func (q *Queries) FeatureExists(ctx context.Context, name string) (int64, error) {
	row := q.db.QueryRowContext(ctx, featureExists, name)
	var exists int64
	err := row.Scan(&exists)
	return exists, err
}

const getFeatures = `-- name: GetFeatures :many
SELECT name, seq FROM features
`

func (q *Queries) GetFeatures(ctx context.Context) ([]Feature, error) {
	rows, err := q.db.QueryContext(ctx, getFeatures)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Feature
	for rows.Next() {
		var i Feature
		if err := rows.Scan(&i.Name, &i.Seq); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getFeaturesByMessageId = `-- name: GetFeaturesByMessageId :many
SELECT feature_name, count FROM messages_features WHERE message_id = ?
`

type GetFeaturesByMessageIdRow struct {
	FeatureName string
	Count       int64
}

func (q *Queries) GetFeaturesByMessageId(ctx context.Context, messageID int64) ([]GetFeaturesByMessageIdRow, error) {
	rows, err := q.db.QueryContext(ctx, getFeaturesByMessageId, messageID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetFeaturesByMessageIdRow
	for rows.Next() {
		var i GetFeaturesByMessageIdRow
		if err := rows.Scan(&i.FeatureName, &i.Count); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const incrementMessageFeatureCount = `-- name: IncrementMessageFeatureCount :exec
UPDATE messages_features SET count = count + 1 WHERE message_id = ? AND feature_name = ?
`

type IncrementMessageFeatureCountParams struct {
	MessageID   int64
	FeatureName string
}

func (q *Queries) IncrementMessageFeatureCount(ctx context.Context, arg IncrementMessageFeatureCountParams) error {
	_, err := q.db.ExecContext(ctx, incrementMessageFeatureCount, arg.MessageID, arg.FeatureName)
	return err
}

const messageHasFeature = `-- name: MessageHasFeature :one
SELECT EXISTS(
    SELECT 1 FROM messages_features 
    WHERE message_id = ?
    AND feature_name = ?
) AS "exists"
`

type MessageHasFeatureParams struct {
	MessageID   int64
	FeatureName string
}

func (q *Queries) MessageHasFeature(ctx context.Context, arg MessageHasFeatureParams) (int64, error) {
	row := q.db.QueryRowContext(ctx, messageHasFeature, arg.MessageID, arg.FeatureName)
	var exists int64
	err := row.Scan(&exists)
	return exists, err
}
